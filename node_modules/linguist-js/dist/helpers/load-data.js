"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const node_cache_1 = __importDefault(require("node-cache"));
const cache = new node_cache_1.default({});
async function loadWebFile(file) {
    // Return cache if it exists
    const cachedContent = cache.get(file);
    if (cachedContent)
        return cachedContent;
    // Otherwise cache the request
    const dataUrl = (file) => `https://raw.githubusercontent.com/github/linguist/HEAD/lib/linguist/${file}`;
    const fileContent = await (0, cross_fetch_1.default)(dataUrl(file)).then(data => data.text());
    cache.set(file, fileContent);
    return fileContent;
}
async function loadLocalFile(file) {
    const filePath = path_1.default.resolve(__dirname, '../../ext', file);
    return fs_1.default.promises.readFile(filePath).then(buffer => buffer.toString());
}
/** Load a data file from github-linguist. */
async function loadFile(file, offline = false) {
    return offline ? loadLocalFile(file) : loadWebFile(file);
}
exports.default = loadFile;
