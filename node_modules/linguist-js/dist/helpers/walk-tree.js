"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
let allFiles;
let allFolders;
/** Generate list of files in a directory. */
function walk(init, root, folders, gitignores, regexIgnores) {
    // Initialise files and folders lists
    if (init) {
        allFiles = new Set();
        allFolders = new Set();
    }
    // Walk tree of a folder
    if (folders.length === 1) {
        const folder = folders[0];
        // Get list of files and folders inside this folder
        const files = fs_1.default.readdirSync(folder).map(file => {
            // Create path relative to root
            const base = path_1.default.resolve(folder, file).replace(/\\/g, '/').replace(root, '.');
            // Add trailing slash to mark directories
            const isDir = fs_1.default.lstatSync(path_1.default.resolve(root, base)).isDirectory();
            return isDir ? `${base}/` : base;
        });
        // Loop through files and folders
        for (const file of files) {
            // Create absolute path for disc operations
            const path = path_1.default.resolve(root, file).replace(/\\/g, '/');
            // Skip if nonexistant or ignored
            const nonExistant = !fs_1.default.existsSync(path);
            const isGitIgnored = gitignores.test(file.replace('./', '')).ignored;
            const isRegexIgnored = regexIgnores.find(match => file.replace('./', '').match(match));
            if (nonExistant || isGitIgnored || isRegexIgnored)
                continue;
            // Add absolute folder path to list
            allFolders.add(path_1.default.resolve(folder).replace(/\\/g, '/'));
            // Check if this is a folder or file
            if (file.endsWith('/')) {
                // Recurse into subfolders
                allFolders.add(path);
                walk(false, root, [path], gitignores, regexIgnores);
            }
            else {
                // Add relative file path to list
                allFiles.add(path);
            }
        }
    }
    // Recurse into all folders
    else {
        for (const path of folders) {
            walk(false, root, [path], gitignores, regexIgnores);
        }
    }
    // Return absolute files and folders lists
    return {
        files: [...allFiles].map(file => file.replace(/^\./, root)),
        folders: [...allFolders],
    };
}
exports.default = walk;
