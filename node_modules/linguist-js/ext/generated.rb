module Linguist
  class Generated
    def self.generated?(name, data)
      new(name, data).generated?
    end
    def initialize(name, data)
      @name = name
      @extname = File.extname(name)
      @_data = data
    end

    attr_reader :name, :extname
    def data
      @data ||= @_data.respond_to?(:call) ? @_data.call() : @_data
    end
    def lines
      @lines ||= data ? data.split("\n", -1) : []
    end
    def generated?
      xcode_file? ||
      intellij_file? ||
      cocoapods? ||
      carthage_build? ||
      generated_graphql_relay? ||
      generated_net_designer_file? ||
      generated_net_specflow_feature_file? ||
      composer_lock? ||
      cargo_lock? ||
      node_modules? ||
      go_vendor? ||
      go_lock? ||
      poetry_lock? ||
      pdm_lock? ||
      esy_lock? ||
      npm_shrinkwrap_or_package_lock? ||
      terraform_lock? ||
      generated_yarn_plugnplay? ||
      godeps? ||
      generated_by_zephir? ||
      minified_files? ||
      has_source_map? ||
      source_map? ||
      compiled_coffeescript? ||
      generated_parser? ||
      generated_net_docfile? ||
      generated_postscript? ||
      compiled_cython_file? ||
      pipenv_lock? ||
      generated_go? ||
      generated_protocol_buffer_from_go? ||
      generated_protocol_buffer? ||
      generated_javascript_protocol_buffer? ||
      generated_apache_thrift? ||
      generated_jni_header? ||
      vcr_cassette? ||
      generated_antlr? ||
      generated_module? ||
      generated_unity3d_meta? ||
      generated_racc? ||
      generated_jflex? ||
      generated_grammarkit? ||
      generated_roxygen2? ||
      generated_html? ||
      generated_jison? ||
      generated_grpc_cpp? ||
      generated_dart? ||
      generated_perl_ppport_header? ||
      generated_gamemakerstudio? ||
      generated_gimp? ||
      generated_visualstudio6? ||
      generated_haxe? ||
      generated_jooq? ||
      generated_pascal_tlb? ||
      generated_sorbet_rbi?
    end
    def xcode_file?
      ['.nib', '.xcworkspacedata', '.xcuserstate'].include?(extname)
    end
    def intellij_file?
      !!name.match(/(?:^|\/)\.idea\//)
    end
    def cocoapods?
      !!name.match(/(^Pods|\/Pods)\//)
    end
    def carthage_build?
      !!name.match(/(^|\/)Carthage\/Build\//)
    end
    def maybe_minified?
      ['.js', '.css'].include? extname.downcase
    end
    def minified_files?
      if maybe_minified? and lines.any?
        (lines.inject(0) { |n, l| n += l.length } / lines.length) > 110
      else
        false
      end
    end
    def has_source_map?
      return false unless maybe_minified?
      lines.last(2).any? { |l| l.match(/^\/[*\/][\#@] source(?:Mapping)?URL|sourceURL=/) }
    end
    def source_map?
      return false unless extname.downcase == '.map'

      name =~ /(\.css|\.js)\.map$/i ||
      lines[0] =~ /^{"version":\d+,/ ||
      lines[0] =~ /^\/\*\* Begin line maps\. \*\*\/{/
    end
    def compiled_coffeescript?
      return false unless extname == '.js'
      if lines[0] =~ /^\/\/ Generated by /
        return true
      end

      if lines[0] == '(function() {' &&
          lines[-2] == '}).call(this);' &&
          lines[-1] == ''

        score = 0

        lines.each do |line|
          if line =~ /var /
            score += 1 * line.gsub(/(_fn|_i|_len|_ref|_results)/).count
            score += 3 * line.gsub(/(__bind|__extends|__hasProp|__indexOf|__slice)/).count
          end
        end
        score >= 3
      else
        false
      end
    end
    def generated_net_docfile?
      return false unless extname.downcase == ".xml"
      return false unless lines.count > 3
      return lines[1].include?("<doc>") &&
        lines[2].include?("<assembly>") &&
        lines[-2].include?("</doc>")
    end
    def generated_net_designer_file?
      !!name.match(/\.designer\.(cs|vb)$/i)
    end
    def generated_net_specflow_feature_file?
      !!name.match(/\.feature\.cs$/i)
    end
    def generated_parser?
      return false unless extname == '.js'
      if lines[0..4].join('') =~ /^(?:[^\/]|\/[^\*])*\/\*(?:[^\*]|\*[^\/])*Generated by PEG.js/
        return true
      end

      false
    end
    def generated_postscript?
      return false unless ['.ps', '.eps', '.pfa'].include? extname
      return true if data =~ /(\n|\r\n|\r)\s*(?:currentfile eexec\s+|\/sfnts\s+\[\1<)\h{8,}\1/
      creator = lines[0..9].find {|line| line =~ /^%%Creator: /}
      return false if creator.nil?
      return true if creator =~ /[0-9]|draw|mpage|ImageMagick|inkscape|MATLAB/ ||
        creator =~ /PCBNEW|pnmtops|\(Unknown\)|Serif Affinity|Filterimage -tops/
      !!creator.include?("EAGLE") and lines[0..4].find {|line| line =~ /^%%Title: EAGLE Drawing /}
    end

    def generated_go?
      return false unless extname == '.go'
      return false unless lines.count > 1

      return lines.first(40).any? { |l| l =~ %r{^// Code generated .*} }
    end
    def generated_protocol_buffer_from_go?
      return false unless extname == '.proto'
      return false unless lines.count > 1

      return lines.first(20).any? { |l| l.include? "This file was autogenerated by go-to-protobuf" }
    end

    PROTOBUF_EXTENSIONS = ['.py', '.java', '.h', '.cc', '.cpp', '.m', '.rb', '.php']
    def generated_protocol_buffer?
      return false unless PROTOBUF_EXTENSIONS.include?(extname)
      return false unless lines.count > 1

      return lines.first(3).any? { |l| l.include?("Generated by the protocol buffer compiler.  DO NOT EDIT!") }
    end
    def generated_javascript_protocol_buffer?
      return false unless extname == ".js"
      return false unless lines.count > 6

      return lines[5].include?("GENERATED CODE -- DO NOT EDIT!")
    end

    APACHE_THRIFT_EXTENSIONS = ['.rb', '.py', '.go', '.js', '.m', '.java', '.h', '.cc', '.cpp', '.php']
    def generated_apache_thrift?
      return false unless APACHE_THRIFT_EXTENSIONS.include?(extname)
      return lines.first(6).any? { |l| l.include?("Autogenerated by Thrift Compiler") }
    end
    def generated_jni_header?
      return false unless extname == '.h'
      return false unless lines.count > 2

      return lines[0].include?("/* DO NOT EDIT THIS FILE - it is machine generated */") &&
               lines[1].include?("#include <jni.h>")
    end
    def node_modules?
      !!name.match(/node_modules\//)
    end
    def go_vendor?
      !!name.match(/vendor\/((?!-)[-0-9A-Za-z]+(?<!-)\.)+(com|edu|gov|in|me|net|org|fm|io)/)
    end
    def go_lock?
      !!name.match(/(Gopkg|glide)\.lock/)
    end
    def poetry_lock?
      !!name.match(/poetry\.lock/)
    end
    def pdm_lock?
      !!name.match(/pdm\.lock/)
    end
    def esy_lock?
      !!name.match(/(^|\/)(\w+\.)?esy.lock$/)
    end
    def npm_shrinkwrap_or_package_lock?
      !!name.match(/npm-shrinkwrap\.json/) || !!name.match(/package-lock\.json/)
    end
    def generated_yarn_plugnplay?
      !!name.match(/(^|\/)\.pnp\..*$/)
    end
    def godeps?
      !!name.match(/Godeps\//)
    end
    def composer_lock?
      !!name.match(/composer\.lock/)
    end
    def generated_by_zephir?
      !!name.match(/.\.zep\.(?:c|h|php)$/)
    end
    def cargo_lock?
      !!name.match(/Cargo\.lock/)
    end
    def vcr_cassette?
      return false unless extname == '.yml'
      return false unless lines.count > 2
      return lines[-2].include?("recorded_with: VCR")
    end
    def generated_antlr?
      return false unless extname == '.g'
      return false unless lines.count > 2
      return lines[1].include?("generated by Xtest")
    end
    def compiled_cython_file?
      return false unless ['.c', '.cpp'].include? extname
      return false unless lines.count > 1
      return lines[0].include?("Generated by Cython")
    end
    def pipenv_lock?
      !!name.match(/Pipfile\.lock/)
    end
    def terraform_lock?
      !!name.match(/(?:^|\/)\.terraform\.lock\.hcl$/)
    end
    def generated_module?
      return false unless extname == '.mod'
      return false unless lines.count > 1
      return lines[0].include?("PCBNEW-LibModule-V") ||
              lines[0].include?("GFORTRAN module version '")
    end
    def generated_unity3d_meta?
      return false unless extname == '.meta'
      return false unless lines.count > 1
      return lines[0].include?("fileFormatVersion: ")
    end
    def generated_racc?
      return false unless extname == '.rb'
      return false unless lines.count > 2
      return lines[2].start_with?("# This file is automatically generated by Racc")
    end
    def generated_jflex?
      return false unless extname == '.java'
      return false unless lines.count > 1
      return lines[0].start_with?("/* The following code was generated by JFlex ")
    end
    def generated_grammarkit?
      return false unless extname == '.java'
      return false unless lines.count > 1
      return lines[0].start_with?("// This is a generated file. Not intended for manual editing.")
    end
    def generated_roxygen2?
      return false unless extname == '.Rd'
      return false unless lines.count > 1

      return lines[0].include?("% Generated by roxygen2: do not edit by hand")
    end
    def generated_jison?
      return false unless extname == '.js'
      return false unless lines.count > 1
      return lines[0].start_with?("/* parser generated by jison ") ||
             lines[0].start_with?("/* generated by jison-lex ")
    end
    def generated_grpc_cpp?
      return false unless %w{.cpp .hpp .h .cc}.include? extname
      return false unless lines.count > 1
      return lines[0].start_with?("// Generated by the gRPC")
    end
    def generated_dart?
      return false unless extname == '.dart'
      return false unless lines.count > 1
      return lines.first.downcase =~ /generated code\W{2,3}do not modify/
    end
    def generated_perl_ppport_header?
        return false unless name.match(/ppport\.h$/)
        return false unless lines.count > 10
        return lines[8].include?("Automatically created by Devel::PPPort")
    end
    def generated_graphql_relay?
      !!name.match(/__generated__\//)
    end
    def generated_gamemakerstudio?
      return false unless ['.yy', '.yyp'].include? extname
      return false unless lines.count > 3
      return lines[2].match(/\"modelName\"\:\s*\"GM/) ||
             lines[0] =~ /^\d\.\d\.\d.+\|\{/
    end
    def generated_gimp?
      return false unless ['.c', '.h'].include? extname
      return false unless lines.count > 0
      return lines[0].match(/\/\* GIMP [a-zA-Z0-9\- ]+ C\-Source image dump \(.+?\.c\) \*\//) ||
             lines[0].match(/\/\*  GIMP header image file format \([a-zA-Z0-9\- ]+\)\: .+?\.h  \*\//)
    end
    def generated_visualstudio6?
      return false unless extname.downcase == '.dsp'
      lines.first(3).any? { |l| l.include? '# Microsoft Developer Studio Generated Build File' }
    end

    HAXE_EXTENSIONS = ['.js', '.py', '.lua', '.cpp', '.h', '.java', '.cs', '.php']
    def generated_haxe?
      return false unless HAXE_EXTENSIONS.include?(extname)
      return lines.first(3).any? { |l| l.include?("Generated by Haxe") }
    end
    def generated_html?
      return false unless ['.html', '.htm', '.xhtml'].include? extname.downcase
      return false unless lines.count > 1
      return true if lines[0..1].any? do |line|
        line.match(/<!-- Generated by pkgdown: do not edit by hand -->/)
      end
      return true if lines.count > 2 && lines[2].start_with?('<!-- This is an automatically generated file.')
      return true if lines[0..30].any? do |line|
        line.match(/<!--\s+Generated by Doxygen\s+[.0-9]+\s*-->/i)
      end
      matches = lines[0..30].join(' ').scan(/<meta(\s+[^>]++)>/i)
      return false if matches.empty?
      return matches.map {|x| extract_html_meta(x) }.any? do |attr|
        attr["name"].to_s.downcase == 'generator' &&
        [attr["content"], attr["value"]].any? do |cv|
          !cv.nil? &&
          cv.match(/^
            ( org \s+ mode
            | j?latex2html
            | groff
            | makeinfo
            | texi2html
            | ronn
            ) \b
          /ix)
        end
      end
    end
    def generated_jooq?
      return false unless extname.downcase == '.java'
      lines.first(2).any? { |l| l.include? 'This file is generated by jOOQ.' }
    end
    def generated_pascal_tlb?
      !!name.match(/_tlb\.pas$/i)
    end
    def generated_sorbet_rbi?
      return false unless extname.downcase == '.rbi'
      return false unless lines.count >= 5
      lines[0].match?(/^# typed:/) &&
      lines[2].include?("DO NOT EDIT MANUALLY") &&
      lines[4].match?(/^# Please.*run.*`.*tapioca/)
    end
    def extract_html_meta(match)
      (match.last.sub(/\/\Z/, "").strip.scan(/
        (?<=^|\s)
        (name|content|value)
        \s* = \s*
        ( "[^"]+"
        | '[^']+'
        |  [^\s"']+
        )
      /ix)).map do |match|
        key = match[0].downcase
        val = match[1].gsub(/\A["']|["']\Z/, '')
        [key, val]
      end.select { |x| x.length == 2 }.to_h
    end
  end
end